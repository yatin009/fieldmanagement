#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');

/**
 * Get port from environment and store in Express.
 */
let ip = process.env.OPENSHIFT_NODEJS_IP || process.env.IP || process.env.npm_package_config_ip || '127.0.0.1'
let port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || process.env.npm_package_config_port || 3000);

app.use(onError);

/**
 * Listen on provided ip and port.
 */
let server = app.listen(port, ip, function() {
    let addr = server.address();
    let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    console.log('fieldmanagement:server listening on ' + bind);
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {

    let port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

/**
 * Event listener for app "error" event.
 */
function onError(error, req, res) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
